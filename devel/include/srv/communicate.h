// Generated by gencpp from file srv/communicate.msg
// DO NOT EDIT!


#ifndef SRV_MESSAGE_COMMUNICATE_H
#define SRV_MESSAGE_COMMUNICATE_H

#include <ros/service_traits.h>


#include <srv/communicateRequest.h>
#include <srv/communicateResponse.h>


namespace srv
{

struct communicate
{

typedef communicateRequest Request;
typedef communicateResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct communicate
} // namespace srv


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::srv::communicate > {
  static const char* value()
  {
    return "e70e17925c7578e703aec9f3657a032c";
  }

  static const char* value(const ::srv::communicate&) { return value(); }
};

template<>
struct DataType< ::srv::communicate > {
  static const char* value()
  {
    return "srv/communicate";
  }

  static const char* value(const ::srv::communicate&) { return value(); }
};


// service_traits::MD5Sum< ::srv::communicateRequest> should match
// service_traits::MD5Sum< ::srv::communicate >
template<>
struct MD5Sum< ::srv::communicateRequest>
{
  static const char* value()
  {
    return MD5Sum< ::srv::communicate >::value();
  }
  static const char* value(const ::srv::communicateRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::srv::communicateRequest> should match
// service_traits::DataType< ::srv::communicate >
template<>
struct DataType< ::srv::communicateRequest>
{
  static const char* value()
  {
    return DataType< ::srv::communicate >::value();
  }
  static const char* value(const ::srv::communicateRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::srv::communicateResponse> should match
// service_traits::MD5Sum< ::srv::communicate >
template<>
struct MD5Sum< ::srv::communicateResponse>
{
  static const char* value()
  {
    return MD5Sum< ::srv::communicate >::value();
  }
  static const char* value(const ::srv::communicateResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::srv::communicateResponse> should match
// service_traits::DataType< ::srv::communicate >
template<>
struct DataType< ::srv::communicateResponse>
{
  static const char* value()
  {
    return DataType< ::srv::communicate >::value();
  }
  static const char* value(const ::srv::communicateResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // SRV_MESSAGE_COMMUNICATE_H
